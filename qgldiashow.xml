<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd"
[
	<!ENTITY funcname "[A-Za-z_:][A-Za-z0-9_:#&#37;@-]*">
	<!ENTITY varname  "[A-Za-z_][A-Za-z0-9_]*">
	<!ENTITY word     "[^|&amp;;()&lt;&gt;\s]+">	<!-- see man bash -->
	<!ENTITY eos      "(?=($|\s))">			<!-- eol or space following -->
	<!ENTITY noword   "(?![\w$+-])">		<!-- no word, $, + or - following -->
]>
<language name="KGLDiaShow" version="1.0" kateversion="2.4" section="Scripts" extensions="*.kds" mimetype="application/x-kgldiashow" casesensitive="1" author="Thomas Lübking (thomas.luebking@web.de)" license="LGPL">
   
   <!-- This is an adaption - ok, i STOLE IT! - from the bash.xml dtd
        (c) 2004 by Wilbert Berendsen, wilbert@kde.nl
      Released under the LGPL, part of kdelibs/kate
    Thanksalot ;)
    -->

  <highlighting>
    <list name="keywords">
      <item> for </item>
      <item> endfor </item>
      <item> loop </item>
      <item> endloop </item>
    </list>

    <list name="builtins">
      <item> wait </item>
      <item> quit </item>
      <item> requireVersion </item>
      <item> debug </item>
<!--       <item> assign </item> -->
      <item> loop </item>
      <item> endloop </item>
      <item> for </item>
      <item> endfor </item>
      <item> setCanvasColor </item>
      <item> loadImage</item>
      <item> copyImage</item>
      <item> removeImage</item>
      <item> showImage </item>
      <item> hideImage </item>
      <item> tintImage </item>
      <item> setImageBrightness </item>
      <item> blurImage </item>
      <item> clipImage </item>
      <item> rotateBy</item>
      <item> rotateImageBy </item>
      <item> rotateTo</item>
      <item> rotateImageTo </item>
      <item> moveBy</item>
      <item> moveImageBy </item>
      <item> moveTo</item>
      <item> moveImageTo </item>
      <item> scaleBy</item>
      <item> scaleImageBy </item>
      <item> scaleTo</item>
      <item> scaleImageTo </item>
      <item> setImageAlpha </item>
    </list>
    
    <contexts>
      <context attribute="Normal Text" lineEndContext="#stay" name="Start">
      	<IncludeRules context="FindAll" />
      </context>

<!-- ====== The following rulessets are meant to be included ======== -->
      <!-- FindAll tries to interpret everything -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindAll">
      	<IncludeRules context="FindComments" />
      	<IncludeRules context="FindCommands" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>
      
      <!-- FindMost tries to interpret anything except commands -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindMost">
      	<IncludeRules context="FindComments" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>


      <!-- FindComments consumes shell comments till EOL -->
      <context attribute="Normal Text" lineEndContext="#pop" name="FindComments">
      	<DetectChar attribute="Comment" context="Comment" char="#" firstNonSpace="false"/>
	<RegExpr attribute="Normal Text" context="Comment" String="[\s;](?=#)" />
      </context>
      <context attribute="Comment" lineEndContext="#pop" name="Comment">
	<IncludeRules context="##Alerts" />
      </context>
      
      <!-- FindCommentsParen consumes shell comments till EOL or a closing parenthese -->
      <context attribute="Normal Text" lineEndContext="#pop" name="FindCommentsParen">
      	<DetectChar attribute="Comment" context="CommentParen" char="#" firstNonSpace="false"/>
	<RegExpr attribute="Normal Text" context="CommentParen" String="[\s;](?=#)" />
      </context>
      <context attribute="Comment" lineEndContext="#pop" name="CommentParen">
      	<RegExpr attribute="Comment" context="#pop" String="[^)](?=\))" />
	<IncludeRules context="##Alerts" />
      </context>
      
      <!-- FindCommentsBackq consumes shell comments till EOL or a backquote -->
      <context attribute="Normal Text" lineEndContext="#pop" name="FindCommentsBackq">
      	<DetectChar attribute="Comment" context="CommentBackq" char="#" firstNonSpace="false"/>
	<RegExpr attribute="Normal Text" context="CommentBackq" String="[\s;](?=#)" />
      </context>
      <context attribute="Comment" lineEndContext="#pop" name="CommentBackq">
      	<RegExpr attribute="Comment" context="#pop" String="[^`](?=`)" />
	<IncludeRules context="##Alerts" />
      </context>
      
      
      <!-- FindCommands matches many items that can be expected outside strings, substitutions etc. -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindCommands">
      	<!-- start expression in double parentheses -->
      	<Detect2Chars attribute="Keyword" context="ExprDblParen" char="(" char1="(" beginRegion="expression" />
	<!-- start expression in double brackets -->
	<RegExpr attribute="Keyword" context="ExprDblBracket" String="\[\[&eos;" beginRegion="expression" column="0"/>
	<RegExpr attribute="Keyword" context="ExprDblBracket" String="\s\[\[&eos;" beginRegion="expression" />
	<!-- start expression in single brackets -->
	<RegExpr attribute="Builtin" context="ExprBracket" String="\[&eos;" beginRegion="expression" column="0"/>
	<RegExpr attribute="Builtin" context="ExprBracket" String="\s\[&eos;" beginRegion="expression" />
	<!-- start a group command with { -->
	<RegExpr attribute="Keyword" context="Group" String="\{&eos;" beginRegion="group" />
      	<!-- start a subshell -->
	<DetectChar attribute="Keyword" context="SubShell" char="(" beginRegion="subshell" />
	<!-- match do and if blocks -->
	<RegExpr attribute="Keyword" context="#stay" String="\bdo&noword;" beginRegion="do" />
      	<RegExpr attribute="Keyword" context="#stay" String="\bdone&noword;" endRegion="do" />
      	<RegExpr attribute="Keyword" context="#stay" String="\bif&noword;" beginRegion="if" />
      	<RegExpr attribute="Keyword" context="#stay" String="\bfi&noword;" endRegion="if" />
      	<!-- handle case as a special case -->
	<RegExpr attribute="Keyword" context="Case" String="\bcase&noword;" beginRegion="case" />
	<!-- handle command line options -->
	<RegExpr attribute="Option" context="#stay" String="-[A-Za-z0-9]+" />
	<RegExpr attribute="Option" context="#stay" String="--[a-z][A-Za-z0-9_-]*" />
	<!-- handle variable assignments -->
	<RegExpr attribute="Variable" context="Assign" String="\b&varname;=" />
	<RegExpr attribute="Variable" context="AssignSubscr" String="\b&varname;(?=\[[^]]+\]=)" />
	<!-- handle functions with function keyword before keywords -->
	<StringDetect attribute="Function" context="#stay" String=":()" />
	<RegExpr attribute="Keyword" context="FunctionDef" String="\bfunction\b" />
	<!-- handle keywords -->
	<keyword attribute="Keyword" context="#stay" String="keywords" />
	<keyword attribute="Builtin" context="#stay" String="builtins" />
        <!-- handle here-string -->
	<StringDetect attribute="Redirection" context="#stay" String="&lt;&lt;&lt;" />
	<!-- handle here document -->
	<StringDetect attribute="Redirection" context="HereDoc" String="&lt;&lt;" lookAhead="true" />
        <!-- handle process subst -->
        <RegExpr attribute="Redirection" context="ProcessSubst" String="[&lt;&gt;]\(" />
        <!-- handle redirection -->
        <RegExpr attribute="Redirection" context="#stay" String="([0-9]*(&gt;{1,2}|&lt;)(&amp;[0-9]+-?)?|&amp;&gt;|&gt;&amp;|[0-9]*&lt;&gt;)" />
	<!-- handle &, &&, | and || -->
	<RegExpr attribute="Control" context="#stay" String="([|&amp;])\1?" />
	<!-- mark function definitions without function keyword -->
        <RegExpr attribute="Function" context="#stay" String="&funcname;\s*\(\)" />
      </context>

      <!-- FindOthers contains various rules to mark different shell input -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindOthers">
	<RegExpr attribute="Escape" context="#stay" String="\\[][;&quot;\\'$`{}()|&amp;&lt;&gt;* ]" />
	<RegExpr attribute="Keyword" context="#stay" String="\\$" />
	<RegExpr attribute="Escape" context="#stay" String="\{(?!(\s|$))\S*\}" />
        <RegExpr attribute="Path" context="#stay" String="\.?/[\w_@.+-]+(?=([\s/):]|$))" />
	<!-- TODO: shell globs -->
      </context>
      
      <!-- FindStrings looks for single and double quoted strings, also with $-prefix -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindStrings">
	<DetectChar attribute="String SingleQ" context="StringSQ" char="'" />
	<DetectChar attribute="String DoubleQ" context="StringDQ" char="&quot;" />
	<Detect2Chars attribute="String SingleQ" context="StringEsc" char="$" char1="'" />
	<Detect2Chars attribute="String Transl." context="StringDQ" char="$" char1="&quot;" />
      </context>
            
      <!-- FindSubstitutions goes after anything starting with $ and ` and their escapes -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindSubstitutions">
	<RegExpr attribute="Variable" context="#stay" String="\$[*@#?$!_0-9-]" />
	<RegExpr attribute="Variable" context="Subscript" String="\$&varname;\[" />
	<RegExpr attribute="Variable" context="#stay" String="\$&varname;" />
	<RegExpr attribute="Variable" context="#stay" String="\$\{[*@#?$!_0-9-]\}" />
	<RegExpr attribute="Variable" context="#stay" String="\$\{#&varname;\}" />
	<RegExpr attribute="Variable" context="#stay" String="\$\{!&varname;\*?\}" />
	<RegExpr attribute="Variable" context="VarBrace" String="\$\{&varname;" />
	<RegExpr attribute="Variable" context="VarBrace" String="\$\{[*@#?$!_0-9-](?=[:#%/])" />
	<StringDetect attribute="Variable" context="ExprDblParenSubst" String="$((" beginRegion="expression" />
	<StringDetect attribute="Redirection" context="SubstFile" String="$(&lt;" />
        <StringDetect attribute="Variable" context="SubstCommand" String="$(" />
	<DetectChar attribute="Backquote" context="SubstBackq" char="`" />
	<RegExpr attribute="Escape" context="#stay" String="\\[`$\\]" />
      </context>

      
      

      
<!-- ====== These are the contexts that can be branched to ======= -->

      <!-- ExprDblParen consumes an expression started in command mode till )) -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprDblParen">
      	<Detect2Chars attribute="Keyword" context="#pop" char=")" char1=")" endRegion="expression" />
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>
      
      <!-- ExprDblParenSubst like ExprDblParen but matches )) as Variable -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprDblParenSubst">
      	<Detect2Chars attribute="Variable" context="#pop" char=")" char1=")" endRegion="expression" />
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>

      <!-- ExprSubParen consumes an expression till ) -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprSubParen">
      	<DetectChar attribute="Normal Text" context="#pop" char=")" />
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>

      <!-- ExprBracket consumes an expression till ] -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprBracket">
      	<RegExpr attribute="Builtin" context="#pop" String="\s\](?=($|[\s;|&amp;]))" endRegion="expression" />
      	<RegExpr attribute="Builtin" context="#pop" String="\](?=($|[\s;|&amp;]))" endRegion="expression" column="0"/>
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>

      <!-- ExprDblBracket consumes an expression till ]] -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprDblBracket">
      	<RegExpr attribute="Keyword" context="#pop" String="\s\]\](?=($|[\s;|&amp;]))" endRegion="expression" />
      	<RegExpr attribute="Keyword" context="#pop" String="\]\](?=($|[\s;|&amp;]))" endRegion="expression" column="0"/>
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>

      <!-- Group consumes shell input till } -->
      <context attribute="Normal Text" lineEndContext="#stay" name="Group">
	<DetectChar attribute="Keyword" context="#pop" char="}" endRegion="group" />
      	<IncludeRules context="FindAll" />
      </context>      

      <!-- SubShell consumes shell input till ) -->
      <context attribute="Normal Text" lineEndContext="#stay" name="SubShell">
	<DetectChar attribute="Keyword" context="#pop" char=")" endRegion="subshell" />
      	<IncludeRules context="FindAll" />
      </context>      

      <!-- Assign consumes an expression till EOL or whitespace -->
      <context attribute="Normal Text" lineEndContext="#pop" name="Assign" fallthrough="true" fallthroughContext="#pop">
      	<DetectChar attribute="Variable" context="AssignArray" char="(" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
	<RegExpr attribute="Normal Text" context="#stay" String="[\w:,+_./-]+" />
      </context>

      <!-- AssignArray consumes everything till ), marking assignments -->
      <context attribute="Normal Text" lineEndContext="#pop" name="AssignArray">
      	<DetectChar attribute="Variable" context="#pop" char=")" />
	<DetectChar attribute="Variable" context="Subscript" char="[" />
	<DetectChar attribute="Variable" context="Assign" char="=" />
	<IncludeRules context="FindMost" />
      </context>
      
      <!-- AssignSubscr first expects a [ then parses subscript and continues with '=value' -->
      <context attribute="Normal Text" lineEndContext="#pop" name="AssignSubscr" fallthrough="true" fallthroughContext="#pop">
      	<DetectChar attribute="Variable" context="Subscript" char="[" />
	<DetectChar attribute="Variable" context="Assign" char="=" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>

      <!-- Subscript consumes anything till ], marks as Variable -->
      <context attribute="Variable" lineEndContext="#stay" name="Subscript">
      	<DetectChar attribute="Variable" context="#pop" char="]" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>
      
      <!-- FunctionDef consumes a name, possibly with (), marks as Function -->
      <context attribute="Function" lineEndContext="#pop" name="FunctionDef" fallthrough="true" fallthroughContext="#pop">
      	<RegExpr attribute="Function" context="#pop" String="\s+&funcname;(\s*\(\))?" />
      </context>            
      
      <!-- VarName consumes spare variable names and assignments -->
      <context attribute="Normal Text" lineEndContext="#pop" name="VarName" fallthrough="true" fallthroughContext="#pop">
	<!-- handle command line options -->
	<RegExpr attribute="Option" context="#stay" String="-[A-Za-z0-9]+" />
	<RegExpr attribute="Option" context="#stay" String="--[a-z][A-Za-z0-9_-]*" />
	<RegExpr attribute="Variable" context="#stay" String="\b&varname;" />
	<DetectChar attribute="Variable" context="Subscript" char="[" />
	<DetectChar attribute="Variable" context="Assign" char="=" />
	<IncludeRules context="FindMost" />
	<!-- stay here in spaces and other safe characters -->
	<RegExpr attribute="Normal Text" context="#stay" String="[^]})|;`&amp;&gt;&lt;]" />
      </context>

      <!-- ProcessSubst handles <(command) and >(command) -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ProcessSubst">
      	<DetectChar attribute="Redirection" context="#pop" char=")" />
	<IncludeRules context="FindCommentsParen" />
	<IncludeRules context="FindCommands" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>

      <!-- StringSQ consumes anything till ' -->            
      <context attribute="String SingleQ" lineEndContext="#stay" name="StringSQ">
      	<DetectChar attribute="String SingleQ" context="#pop" char="'" />
      </context>

      <!-- StringDQ consumes anything till ", substitutes vars and expressions -->
      <context attribute="String DoubleQ" lineEndContext="#stay" name="StringDQ">
      	<DetectChar attribute="String DoubleQ" context="#pop" char="&quot;" />
      	<RegExpr attribute="String Escape" context="#stay" String="\\[`&quot;\\$\n]" />
	<IncludeRules context="FindSubstitutions" />
      </context>
      
      <!-- StringEsc eats till ', but escaping many characters -->
      <context attribute="String SingleQ" lineEndContext="#stay" name="StringEsc">
      	<DetectChar attribute="String SingleQ" context="#pop" char="'" />
      	<RegExpr attribute="String Escape" context="#stay" String="\\[abefnrtv\\']" />
      	<RegExpr attribute="String Escape" context="#stay" String="\\([0-7]{1,3}|x[A-Fa-f0-9]{1,2}|c.)" />
      </context>

      <!-- VarBrace is called as soon as ${xxx is encoutered -->
      <context attribute="Variable" lineEndContext="#stay" name="VarBrace">
        <DetectChar attribute="Variable" context="#pop" char="}" />
      	<DetectChar attribute="Variable" context="Subscript" char="[" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />
	<!-- TODO: highlight various special parameter expansions } -->
      </context>
      
      <!-- SubstFile is called after a <( or >( is encoutered -->
      <context attribute="Normal Text" lineEndContext="#stay" name="SubstFile">
      	<DetectChar attribute="Redirection" context="#pop" char=")" />
	<IncludeRules context="FindCommentsParen" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>
      
      <!-- SubstCommand is called after a $( is encountered -->
      <context attribute="Normal Text" lineEndContext="#stay" name="SubstCommand">
      	<DetectChar attribute="Variable" context="#pop" char=")" />
	<IncludeRules context="FindCommentsParen" />
	<IncludeRules context="FindCommands" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>
      
      <!-- SubstBackq is called when a backquote is encountered -->
      <context attribute="Normal Text" lineEndContext="#stay" name="SubstBackq">
      	<DetectChar attribute="Keyword" context="#pop" char="`" />
	<IncludeRules context="FindCommentsBackq" />
	<IncludeRules context="FindCommands" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>

      <!-- Case is called after the case keyword is encoutered. We handle this because of
           the lonely closing parentheses that would otherwise disturb the expr matching -->
      <context attribute="Normal Text" lineEndContext="#stay" name="Case">
        <RegExpr attribute="Keyword" context="CaseIn" String="\sin\b" />
        <IncludeRules context="FindMost" />
      </context>

      <!-- CaseIn is called when the construct 'case ... in' has been found. -->
      <context attribute="Normal Text" lineEndContext="#stay" name="CaseIn">
        <RegExpr attribute="Keyword" context="#pop#pop" String="\besac(?=$|[\s;)])" endRegion="case" />
      	<DetectChar attribute="Keyword" context="CaseExpr" char=")" beginRegion="caseexpr" />
	<AnyChar attribute="Keyword" context="#stay" String="(|" />
        <IncludeRules context="FindMost" />
      </context>

      <!-- CaseExpr eats shell input till ;; -->
      <context attribute="Normal Text" lineEndContext="#stay" name="CaseExpr">
        <Detect2Chars attribute="Keyword" context="#pop" char=";" char1=";" endRegion="caseexpr" />
	<IncludeRules context="FindAll" />
      </context>

      <!-- HereDoc consumes Here-documents. It is called at the beginning of the "<<" construct. -->
      <context attribute="Normal Text" lineEndContext="#stay" name="HereDoc">
	<RegExpr attribute="Redirection" context="HereDocQ"   String="(&lt;&lt;\s*&quot;(&word;)&quot;)" lookAhead="true" />
	<RegExpr attribute="Redirection" context="HereDocQ"   String="(&lt;&lt;\s*'(&word;)')" lookAhead="true" />
	<RegExpr attribute="Redirection" context="HereDocQ"   String="(&lt;&lt;\s*\\(&word;))" lookAhead="true" />
	<RegExpr attribute="Redirection" context="HereDocNQ"  String="(&lt;&lt;(?!-)\s*(&word;))" lookAhead="true" />
	<RegExpr attribute="Redirection" context="HereDocIQ"  String="(&lt;&lt;-\s*&quot;(&word;)&quot;)" lookAhead="true" />
	<RegExpr attribute="Redirection" context="HereDocIQ"  String="(&lt;&lt;-\s*'(&word;)')" lookAhead="true" />
	<RegExpr attribute="Redirection" context="HereDocIQ"  String="(&lt;&lt;-\s*\\(&word;))" lookAhead="true" />
	<RegExpr attribute="Redirection" context="HereDocINQ" String="(&lt;&lt;-\s*(&word;))" lookAhead="true" />
	<StringDetect attribute="Redirection" context="#pop"  String="&lt;&lt;" /><!-- always met -->
      </context>

      <context attribute="Normal Text" lineEndContext="#pop" name="HereDocRemainder">
	<IncludeRules context="FindAll" />
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" name="HereDocQ" dynamic="true">
	<RegExpr attribute="Redirection" context="HereDocRemainder" String="%1" dynamic="true" />
	<RegExpr attribute="Redirection" context="#pop#pop" String="%2[\s;]*$" dynamic="true" column="0"/>
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" name="HereDocNQ" dynamic="true">
	<RegExpr attribute="Redirection" context="HereDocRemainder" String="%1" dynamic="true" />
	<RegExpr attribute="Redirection" context="#pop#pop" String="%2[\s;]*$" dynamic="true" column="0"/>
	<IncludeRules context="FindSubstitutions" />
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" name="HereDocIQ" dynamic="true">
	<RegExpr attribute="Redirection" context="HereDocRemainder" String="%1" dynamic="true" />
	<RegExpr attribute="Redirection" context="#pop#pop" String="\s*%2[\s;]*$" dynamic="true" column="0"/>
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" name="HereDocINQ" dynamic="true">
	<RegExpr attribute="Redirection" context="HereDocRemainder" String="%1" dynamic="true" />
	<RegExpr attribute="Redirection" context="#pop#pop" String="\s*%2[\s;]*$" dynamic="true" column="0"/>
	<IncludeRules context="FindSubstitutions" />
      </context>

    </contexts>
    
    <itemDatas>
      <itemData name="Normal Text"	defStyleNum="dsNormal" />
      <itemData name="Comment"		defStyleNum="dsComment" />
      <itemData name="Keyword" 		defStyleNum="dsKeyword" />
      <itemData name="Control" 		defStyleNum="dsKeyword" />
      <itemData name="Builtin" 		defStyleNum="dsKeyword" color="#808" />
      <itemData name="Command" 		defStyleNum="dsKeyword" color="#c0c" />
      <itemData name="Redirection" 	defStyleNum="dsKeyword" color="#238" />
      <itemData name="Escape" 		defStyleNum="dsDataType" />
      <itemData name="String SingleQ" 	defStyleNum="dsString" />
      <itemData name="String DoubleQ" 	defStyleNum="dsString" />
      <itemData name="Backquote" 	defStyleNum="dsKeyword" />
      <itemData name="String Transl." 	defStyleNum="dsString" />
      <itemData name="String Escape" 	defStyleNum="dsDataType" />
      <itemData name="Variable" 	defStyleNum="dsOthers" />
      <itemData name="Expression" 	defStyleNum="dsOthers" />
      <itemData name="Function" 	defStyleNum="dsChar" bold="1" />
      <itemData name="Path" 		defStyleNum="dsNormal" />
      <itemData name="Option" 		defStyleNum="dsNormal" />
    </itemDatas>
  </highlighting>
  <general>
    <comments>
      <comment name="singleLine" start="#"/>
    </comments>
    <keywords casesensitive="1" weakDeliminator="^%#[]$._{}:-" additionalDeliminator="`"/>
  </general>
</language>
